use crate::*;

#[test]
fn test_debug() {
    for value in f32s() {
        assert_eq!(format!("{:?}", value), format!("{:?}", f64::from(value)));
    }
    for value in f64s() {
        assert_eq!(format!("{:?}", value), format!("{:?}", f64::from(value)));
    }
}

#[test]
fn test_display() {
    for value in f32s() {
        let reference = f64::from(value);
        assert_eq!(format!("{}", value), format!("{}", reference));
        assert_eq!(format!("{:08}", value), format!("{:08}", reference));
        assert_eq!(format!("{:e}", value), format!("{:e}", reference));
        assert_eq!(format!("{:05e}", value), format!("{:05e}", reference));
        assert_eq!(format!("{:E}", value), format!("{:E}", reference));
        assert_eq!(format!("{:4E}", value), format!("{:4E}", reference));
    }
    for value in f64s() {
        let reference = f64::from(value);
        assert_eq!(format!("{}", value), format!("{}", reference));
        assert_eq!(format!("{:08}", value), format!("{:08}", reference));
        assert_eq!(format!("{:e}", value), format!("{:e}", reference));
        assert_eq!(format!("{:05e}", value), format!("{:05e}", reference));
        assert_eq!(format!("{:E}", value), format!("{:E}", reference));
        assert_eq!(format!("{:4E}", value), format!("{:4E}", reference));
    }
}

fn f32s() -> impl Iterator<Item = F32> {
    [
        0x00000000, 0x80000000, 0x00000001, 0x80000001, 0x3f000000, 0xbf000000, 0x7f000000,
        0xff000000, 0x1b100000, 0x9b100000, 0x1b200000, 0x9b200000, 0x1b400000, 0x9b400000,
        0x1b400001, 0x9b400001, 0x1b800000, 0x9b800000, 0x1bbfffff, 0x9bbfffff, 0x1bc00000,
        0x9bc00000, 0x1da7bfff, 0x9da7bfff, 0x1da7c000, 0x9da7c000, 0x1da84000, 0x9da84000,
        0x1da84001, 0x9da84001, 0x1da8bfff, 0x9da8bfff, 0x1da8c000, 0x9da8c000, 0x1da94000,
        0x9da94000, 0x1da94001, 0x9da94001, 0x1da9bfff, 0x9da9bfff, 0x1da9c000, 0x9da9c000,
        0x1daa4000, 0x9daa4000, 0x1daa4001, 0x9daa4001, 0x1fffffff, 0x9fffffff, 0x20fffff4,
        0xa0fffff4, 0x20fffff5, 0xa0fffff5, 0x20fffff6, 0xa0fffff6, 0x20fffff7, 0xa0fffff7,
        0x20fffff8, 0xa0fffff8, 0x20fffff9, 0xa0fffff9, 0x20fffffa, 0xa0fffffa, 0x20fffffb,
        0xa0fffffb, 0x20fffffc, 0xa0fffffc, 0x20fffffd, 0xa0fffffd, 0x20fffffe, 0xa0fffffe,
        0x20ffffff, 0xa0ffffff, 0x21100000, 0xa1100000, 0x21200000, 0xa1200000, 0x213fffff,
        0xa13fffff, 0x21400000, 0xa1400000, 0x40800000, 0xc0800000, 0x46000001, 0xc6000001,
        0x45000010, 0xc5000010, 0x44000100, 0xc4000100, 0x43001000, 0xc3001000, 0x42010000,
        0xc2010000, 0x41100000, 0xc1100000, 0x41200000, 0xc1200000, 0x41300000, 0xc1300000,
        0x41400000, 0xc1400000, 0x41800000, 0xc1800000, 0x48000001, 0xc8000001, 0x48000002,
        0xc8000002, 0x48000004, 0xc8000004, 0x48000008, 0xc8000008, 0x48000010, 0xc8000010,
        0x48000020, 0xc8000020, 0x48000040, 0xc8000040, 0x48000080, 0xc8000080, 0x48000100,
        0xc8000100, 0x48000200, 0xc8000200, 0x48000400, 0xc8000400, 0x48000800, 0xc8000800,
        0x48001000, 0xc8001000, 0x48002000, 0xc8002000, 0x48004000, 0xc8004000, 0x48008000,
        0xc8008000, 0x48010000, 0xc8010000, 0x48020000, 0xc8020000, 0x48040000, 0xc8040000,
        0x48080000, 0xc8080000, 0x48100000, 0xc8100000, 0x48200000, 0xc8200000, 0x48400000,
        0xc8400000, 0x48800000, 0xc8800000, 0x60ffffff, 0xe0ffffff, 0x61100000, 0xe1100000,
        0x61200000, 0xe1200000, 0x61400000, 0xe1400000, 0x62100000, 0xe2100000, 0x7fffffff,
        0xffffffff, 0xc276a000, 0x4276a000,
    ]
    .iter()
    .cloned()
    .map(F32::from_bits)
}

fn f64s() -> impl Iterator<Item = F64> {
    [
        0x0000000000000001,
        0x8000000000000001,
        0x0000000000000002,
        0x8000000000000002,
        0x0000000000000003,
        0x8000000000000003,
        0x400ffffffffffffe,
        0xc00ffffffffffffe,
        0x400fffffffffffff,
        0xc00fffffffffffff,
        0x4010000000000000,
        0xc010000000000000,
        0x4010000000000001,
        0xc010000000000001,
        0x4010000000000002,
        0xc010000000000002,
        0x401ffffffffffffe,
        0xc01ffffffffffffe,
        0x401fffffffffffff,
        0xc01fffffffffffff,
        0x4020000000000000,
        0xc020000000000000,
        0x4020000000000001,
        0xc020000000000001,
        0x4020000000000002,
        0xc020000000000002,
        0x4020000000000003,
        0xc020000000000003,
        0x403ffffffffffffd,
        0xc03ffffffffffffd,
        0x403ffffffffffffe,
        0xc03ffffffffffffe,
        0x403fffffffffffff,
        0xc03fffffffffffff,
        0x4040000000000002,
        0xc040000000000002,
        0x4040000000000003,
        0xc040000000000003,
        0x4040000000000005,
        0xc040000000000005,
        0x4040000000000006,
        0xc040000000000006,
        0x407ffffffffffffa,
        0xc07ffffffffffffa,
        0x407ffffffffffffb,
        0xc07ffffffffffffb,
        0x407ffffffffffffd,
        0xc07ffffffffffffd,
        0x407ffffffffffffe,
        0xc07ffffffffffffe,
        0x4080000000000004,
        0xc080000000000004,
        0x4080000000000005,
        0xc080000000000005,
        0x408000000000000b,
        0xc08000000000000b,
        0x408000000000000c,
        0xc08000000000000c,
        0x40fffffffffffff4,
        0xc0fffffffffffff4,
        0x40fffffffffffff5,
        0xc0fffffffffffff5,
        0x40fffffffffffffb,
        0xc0fffffffffffffb,
        0x40fffffffffffffc,
        0xc0fffffffffffffc,
        0x4110000000000000,
        0xc110000000000000,
        0x4110000000000001,
        0xc110000000000001,
        0x4110000000000002,
        0xc110000000000002,
        0x411fffffffffffff,
        0xc11fffffffffffff,
        0x4120000000000000,
        0xc120000000000000,
        0x4120000000000001,
        0xc120000000000001,
        0x4120000000000002,
        0xc120000000000002,
        0x4800000000000001,
        0xc800000000000001,
        0x4800000000000002,
        0xc800000000000002,
        0x4800000000000004,
        0xc800000000000004,
        0x4800000000000008,
        0xc800000000000008,
        0x4800000000000010,
        0xc800000000000010,
        0x4800000000000020,
        0xc800000000000020,
        0x4800000000000040,
        0xc800000000000040,
        0x4800000000000080,
        0xc800000000000080,
        0x4800000000000100,
        0xc800000000000100,
        0x4800000000000200,
        0xc800000000000200,
        0x4800000000000400,
        0xc800000000000400,
        0x4800000000000800,
        0xc800000000000800,
        0x4800000000001000,
        0xc800000000001000,
        0x4800000000002000,
        0xc800000000002000,
        0x4800000000004000,
        0xc800000000004000,
        0x4800000000008000,
        0xc800000000008000,
        0x4800000000010000,
        0xc800000000010000,
        0x4800000000020000,
        0xc800000000020000,
        0x4800000000040000,
        0xc800000000040000,
        0x4800000000080000,
        0xc800000000080000,
        0x4800000000100000,
        0xc800000000100000,
        0x4800000000200000,
        0xc800000000200000,
        0x4800000000400000,
        0xc800000000400000,
        0x4800000000800000,
        0xc800000000800000,
        0x4800000001000000,
        0xc800000001000000,
        0x4800000002000000,
        0xc800000002000000,
        0x4800000004000000,
        0xc800000004000000,
        0x4800000008000000,
        0xc800000008000000,
        0x4800000010000000,
        0xc800000010000000,
        0x4800000020000000,
        0xc800000020000000,
        0x4800000040000000,
        0xc800000040000000,
        0x4800000080000000,
        0xc800000080000000,
        0x4800000100000000,
        0xc800000100000000,
        0x4800000200000000,
        0xc800000200000000,
        0x4800000400000000,
        0xc800000400000000,
        0x4800000800000000,
        0xc800000800000000,
        0x4800001000000000,
        0xc800001000000000,
        0x4800002000000000,
        0xc800002000000000,
        0x4800004000000000,
        0xc800004000000000,
        0x4800008000000000,
        0xc800008000000000,
        0x4800010000000000,
        0xc800010000000000,
        0x4800020000000000,
        0xc800020000000000,
        0x4800040000000000,
        0xc800040000000000,
        0x4800080000000000,
        0xc800080000000000,
        0x4800100000000000,
        0xc800100000000000,
        0x4800200000000000,
        0xc800200000000000,
        0x4800400000000000,
        0xc800400000000000,
        0x4800800000000000,
        0xc800800000000000,
        0x4801000000000000,
        0xc801000000000000,
        0x4802000000000000,
        0xc802000000000000,
        0x4804000000000000,
        0xc804000000000000,
        0x4808000000000000,
        0xc808000000000000,
        0x4810000000000000,
        0xc810000000000000,
        0x4820000000000000,
        0xc820000000000000,
        0x4840000000000000,
        0xc840000000000000,
        0x4880000000000000,
        0xc880000000000000,
        0x567faef3ff3dc282,
        0xd67faef3ff3dc282,
        0x7ffffffffffffff4,
        0xfffffffffffffff4,
        0x7ffffffffffffff5,
        0xfffffffffffffff5,
        0x7ffffffffffffffb,
        0xfffffffffffffffb,
        0x7ffffffffffffffc,
        0xfffffffffffffffc,
        0x7ffffffffffffffd,
        0xfffffffffffffffd,
        0x7ffffffffffffffe,
        0xfffffffffffffffe,
        0x7fffffffffffffff,
        0xffffffffffffffff,
        0x0000000000000000,
        0x8000000000000000,
        0x0000000100000000,
        0x8000000100000000,
        0x00ffffff00000000,
        0x80ffffff00000000,
        0x4110000000000000,
        0xc110000000000000,
        0x7fffffff00000000,
        0xffffffff00000000,
    ]
    .iter()
    .cloned()
    .map(F64::from_bits)
}
